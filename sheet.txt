TH
Q1
#include <bits/stdc++.h>

void setZeros(vector<vector<int>> &matrix)
{
	int col0=1;
	int m=matrix.size();
	int n=matrix[0].size();
	for(int i=0;i<m;i++)
	{
		for(int j=0;j<n;j++)
		{
			if(matrix[i][j]==0)
			{
				matrix[i][0]=0;
				if(j!=0)
				{
					matrix[0][j]=0;
				}
				else col0=0;
			}
		}
	}
	for(int i=1;i<m;i++)
	{
		for(int j=1;j<n;j++)
		{
            if (matrix[i][j] != 0) {
                if (matrix[i][0] == 0 || matrix[0][j] == 0)
                      matrix[i][j] = 0;
            }
        }
	}
	if(matrix[0][0]==0){
		for(int i=1;i<n;i++)
		{
			matrix[0][i]=0;
		}
	}
	if(col0==0){
		for(int i=0;i<m;i++)
		{
			matrix[i][0]=0;
		}
	}
	
	

}

Q2

#include <bits/stdc++.h>

vector<vector<long long int>> printPascal(int n) 
{
   vector<vector<long long int>> output(n);
        for(int i=0; i<n; i++){
            output[i].resize(i+1, 1);
            for(int j=1; j<i; j++){
                output[i][j] = output[i-1][j-1] + output[i-1][j];
            }
        }
        return output;
  
}

Q3
#include <bits/stdc++.h> 
vector<int> nextPermutation(vector<int> &permutation, int n)
{
    int ind=-1;
    for(int i=n-2;i>=0;i--)    
    {
           if(permutation[i+1]>permutation[i])
           {
               ind=i;
               break;
           }

    }
    if(ind==-1)
    {
        reverse(permutation.begin(),permutation.end());
        return permutation;
    }
    for(int i=n-1;i>=0;i--)
    {
        if(permutation[ind]<permutation[i])
        {
            swap(permutation[ind],permutation[i]);
            break;
        }
    }
    reverse(permutation.begin()+ind+1,permutation.end());
    return permutation;

}
Q4	
#include <bits/stdc++.h> 
long long maxSubarraySum(int arr[], int n)
{
    /*
        Don't write main().
        Don't read input, it is passed as function argument.    
        No need to print anything.
        Taking input and printing output is handled automatically.
    */
    long long maxi=LONG_MIN;
    long long sum=0;
    for(int i=0;i<n;i++)
    {
        sum+=arr[i];
        maxi=max(maxi,sum);
        if(sum<0)sum=0;
    }
    if(maxi<0) return 0;
    else return maxi;

    
}

Q5
#include <bits/stdc++.h> 
void sort012(int *arr, int n)
{
   //   Write your code here
   int low=0,mid=0,high=n-1;
   

   while(mid<=high)
   {
      
      if(arr[mid]==0)
      {
         swap(arr[low],arr[mid]);
         low++;
         mid++;
      
      }
      else if (arr[mid] == 1) {

        mid++;
      }

      else  {
        swap(arr[mid], arr[high]);
        
        high--;
      }
   }
   
}
Q6
#include <bits/stdc++.h> 
int maximumProfit(vector<int> &prices){
    // Write your code here.
    int profit=0,mini=prices[0];
    for(int i=1;i<prices.size();i++)
    {
        profit=max(profit,(prices[i]-mini));
        mini=min(prices[i],mini);
    }
    return profit;
   
}
Q7
#include <bits/stdc++.h>

void rotateMatrix(vector<vector<int>> &mat, int n, int m)
{
    int row = 0, col = 0; 
    int prev, curr; 
    int lastRow= n;
    int lastCol= m;
    while (row < lastRow && col < lastCol) 

    {  
        if (row + 1 == lastRow || col + 1 == lastCol)  break;   

        prev = mat[row + 1][col]; 
        
        for (int i = col; i < lastCol; i++) 
        { 
            curr = mat[row][i]; 
            mat[row][i] = prev; 
            prev = curr; 
        } 
        row++; 
        
        for (int i = row; i < lastRow; i++) 
        { 
            curr = mat[i][lastCol-1]; 
            mat[i][lastCol-1] = prev; 
            prev = curr; 
        } 
        lastCol--;   
        
        if (row < lastRow) 
        { 
            for (int i = lastCol-1; i >= col; i--) 
            { 
                curr = mat[lastRow-1][i]; 
                mat[lastRow-1][i] = prev; 
                prev = curr; 
            } 
        } 
        lastRow--; 
        
        if (col < lastCol) 
        { 
            for (int i = lastRow-1; i >= row; i--) 
            { 
                curr = mat[i][col]; 
                mat[i][col] = prev; 
                prev = curr; 
            } 
        } 
        col++; 
    } 
 
    

}
Q8
#include <bits/stdc++.h> 
/*

    intervals[i][0] = start point of i'th interval
    intervals[i][1] = finish point of i'th interval

*/

vector<vector<int>> mergeIntervals(vector<vector<int>> &arr)
{
    vector<vector<int>> ans;
     sort(arr.begin(), arr.end());

    for (int i = 0; i < arr.size(); i++) {
        
        if (ans.empty() || arr[i][0] > ans.back()[1]) {
            ans.push_back(arr[i]);
        }
        
        else {
            ans.back()[1] = max(ans.back()[1], arr[i][1]);
        }
    }
    return ans;
}
Q9
#include <bits/stdc++.h>

vector<int> ninjaAndSortedArrays(vector<int>& arr1, vector<int>& arr2, int m, int n) {
	// Write your code here.

	int left=m-1;
	int right=0;
	while(left>=0 && right<n)
	{
		if(arr2[right]<arr1[left])
		{
			swap(arr2[right],arr1[left]);
			right++;
			left--;
         } 
		else {
                  break;
                }
    }
	sort(arr1.begin(),arr1.begin()+m);
	sort(arr2.begin(),arr2.begin()+n);
	for(int i=m;i<m+n;i++)
	{
		arr1[i]=arr2[i-m];
	}
	return arr1;
}

Q10
#include <bits/stdc++.h>

int findDuplicate(vector<int> &arr, int n){
	// Write your code here.
	sort(arr.begin(),arr.end());
	for(int i=0;i<n-1;i++)
	{
		if(arr[i]==arr[i+1])
		{
			return (arr[i]);
		}
	}
}

Q11-24 MISSING













Q25
#include <bits/stdc++.h>

/****************************************************************

    Following is the class structure of the LinkedListNode class:

    template <typename T>
    class LinkedListNode
    {
    public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*****************************************************************/

LinkedListNode<int> *reverseLinkedList(LinkedListNode<int> *head) 
{
    // Write your code here
    if(head==NULL || head->next==NULL)return head;
    LinkedListNode<int> *prev=NULL; 
    LinkedListNode<int> *curr=head;
    LinkedListNode<int> *forward=head->next;
    while(curr!=NULL)
    {
        forward=curr->next;
        curr->next=prev;
        prev=curr;
        curr=forward;
        
        
        
    }  
    return prev; 
        

        

    
    
}


Q26
/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/
int nodeLength(Node* head){
    int count=0;
    while(head!=NULL)
    {
        head=head->next;
        count++;
    }
    return count;
}


Node *reverse(Node *head) {
    // Write your code here
    int len=nodeLength(head);
    int ans=len/2;
    Node* temp=head;
    while(ans!=0)
    {
        temp=temp->next;
        ans--;
    }
    return temp;


}

Q27
#include <bits/stdc++.h>

/************************************************************

    Following is the linked list node structure.
    
    template <typename T>
    class Node {
        public:
        T data;
        Node* next;

        Node(T data) {
            next = NULL;
            this->data = data;
        }

        ~Node() {
            if (next != NULL) {
                delete next;
            }
        }
    };

************************************************************/

Node<int>* sortTwoLists(Node<int>* first, Node<int>* second)
{
    // Write your code here.
    if(first==NULL)return second;
    if(second==NULL)return first;
    Node<int>*l1=first,*l2=second,*temp,*res;
    if(l1->data>=l2->data)swap(l1,l2);
    res=l1;

    while(l1!=NULL && l2!=NULL)
    {
        temp=NULL;
        while(l1!=NULL && l1->data<=l2->data)
        {
            temp=l1;
            l1=l1->next;
        }
        temp->next=l2;
        swap(l1,l2);

    }
    

    return res;
    


    

}
Q 28

/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/
int nodeLength(Node* head)
{
    int cnt=0;
    while(head!=NULL)
    {
        head=head->next;
        cnt++;
    }
    return cnt;
}

Node* removeKthNode(Node* head, int K)
{
    // Write your code here.
    int len=nodeLength(head);

    Node*t,* p=head;
    t=head;
    if(len-K==0)return p->next;
    
    
    while(len-K-1)
    {
        p=p->next;
        len--;
        
    }
   
   p->next=p->next->next;
//    delete(q);
    
    return t;
    

}

Q29
/**
 * Definition of linked list:
 *
 * class Node {
 * public:
 *      int data;
 *      Node *next;
 *      Node() {
 *          this->data = 0;
 *          this->next = NULL;
 *      }
 *      Node(int data) {
 *          this->data = data;
 *          this->next = NULL;
 *      }
 *      Node (int data, Node *next) {
 *          this->data = data;
 *          this->next = next;
 *      }
 * };
 *
 
 *************************************************************************/
 
 void insertAtTail(Node*  &head,Node* &tail,int digit)
 {
   Node* temp=new Node(digit);
   if(head==NULL)
   {
     head=temp;
     tail=temp;
     return;
    
   }
   else{
     tail->next=temp;
     tail=temp;
   }
   
 }
Node *addTwoNumbers(Node *num1, Node *num2)
{
    // Write your code here.
    
    
    
    Node* dummy=NULL,*temp=NULL;
    int carry=0;
    while(num1!=NULL || num2!=NULL || carry)
    {
      int sum=0;
      if(num1!= NULL)
      {
        sum+=num1->data;
        num1=num1->next;
        
      }
      if(num2!= NULL)
      {
        sum+=num2->data;
        num2=num2->next;
        
      }
      sum+=carry;
      carry=sum/10;
      sum%=10;
      
      insertAtTail(dummy,temp,sum);
      
      
        
      
      
      
    }
    
    return dummy;
}
Q30
#include <bits/stdc++.h>

/****************************************************************

    Following is the class structure of the LinkedListNode class:

    template <typename T>
    class LinkedListNode
    {
    public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*****************************************************************/

void deleteNode(LinkedListNode<int> * node) {
    // Write your code here.
    if(node==NULL)return;
    if(node->next==NULL)
    {
        node=NULL;
        return;
    }
    node->data=node->next->data;
    LinkedListNode<int> *temp=node->next;
    node->next=temp->next;
    delete temp;

}
Q31
/****************************************************************

    Following is the class structure of the Node class:

        class Node
        {
        public:
            int data;
            Node *next;
            Node()
            {
                this->data = 0;
                next = NULL;
            }
            Node(int data)
            {
                this->data = data;
                this->next = NULL;
            }
            Node(int data, Node* next)
            {
                this->data = data;
                this->next = next;
            }
        };

*****************************************************************/

Node* findIntersection(Node *head1, Node *head2)
{
    //Write your code here
    if(head1==NULL || head2==NULL)return NULL;
    Node *d1=head1,*d2=head2;
    while(d1!=d2)
    {
        d1=(d1==NULL)?head2:d1->next;
        d2=(d2==NULL)?head1:d2->next;

    }
    
    

    return d1;
}
Q32
/****************************************************************

    Following is the class structure of the Node class:

        class Node
        {
        public:
            int data;
            Node *next;
            Node()
            {
                this->data = 0;
                next = NULL;
            }
            Node(int data)
            {
                this->data = data;
                this->next = NULL;
            }
            Node(int data, Node* next)
            {
                this->data = data;
                this->next = next;
            }
        };


*****************************************************************/

bool detectCycle(Node *head)
{
	//	Write your code here
    if(head == NULL ||  head->next==NULL)return false;
    Node* s=head,*f=head;
    while(f->next && f->next->next)
    {
        
        s=s->next;
        f=f->next->next;
        if(s==f)return true;

    }
    return false;
}
Q33
#include <bits/stdc++.h>

/****************************************************************

    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/
int calc(Node *head){
	Node*p=head;
	int l=0;
	while(p){
		l++;
		p=p->next;
	}
	return l;
}

Node *reverse(Node *head) {
  Node *p = head, *nxt, *prev = NULL;

  while (p) {
    nxt = p->next;
    p->next = prev;

    prev = p;
    p = nxt;
  }

  return prev;
}


Node *getListAfterReverseOperation(Node *head, int n, int b[]){
	// Write your code here.
	Node*dummy=new Node(0);

	dummy->next=head;
    Node*p=dummy,*curr,*nxt;
	if(head==NULL || head->next==NULL)return head;
	int len=calc(head);
	for(int i=0;i<n;i++){
		if(len==0)break;
		if(b[i]<=len){
			curr=p->next;
			nxt=curr->next;

			if(b[i]==0)continue;
			for(int j=0;j<b[i]-1;j++)
			{
				curr->next=nxt->next;
				nxt->next=p->next;
				p->next=nxt;
				nxt=curr->next;

			}
			len-=b[i];
			p=curr;


		}
		else if(len<=b[i])
		{
			p->next=reverse(p->next);
			len=0;
		}
	}



    return dummy->next;
	


}
Q34

#include <bits/stdc++.h> 
/****************************************************************

    Following is the class structure of the LinkedListNode class:

    template <typename T>
    class LinkedListNode
    {
    public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*****************************************************************/
LinkedListNode<int>*reverse(LinkedListNode<int>*head)
{
    LinkedListNode<int>*curr=head,*forward=head,*newhead=NULL;
    while(curr!=NULL)
    {
        forward=curr->next;curr->next=newhead;
        newhead=curr;
        curr=forward;
        

        
    }
    return newhead;
}

bool isPalindrome(LinkedListNode<int> *head) {
    // Write your code here.
    if(head==NULL ||head->next==NULL )return true;
    LinkedListNode<int>* s=head,*f=head,*d=head;
    while(f->next && f->next->next)
    {
        s=s->next;
        f=f->next->next;
    }
    s->next=reverse(s->next);
    s=s->next;
    while(s!=NULL)
    {
        if(s->data!=d->data)return false;
        s=s->next;
        d=d->next;
    }
    return true;


}
Q 35

/****************************************************************

    Following is the class structure of the Node class:

        class Node
        {
        public:
            int data;
            Node *next;
            Node()
            {
                this->data = 0;
                next = NULL;
            }
            Node(int data)
            {
                this->data = data;
                this->next = NULL;
            }
            Node(int data, Node* next)
            {
                this->data = data;
                this->next = next;
            }
        };


*****************************************************************/

Node *firstNode(Node *head)
{
    //    Write your code here.
    if(head==NULL || head->next==NULL)return NULL;
    Node *s=head,*f=head,*entry=head;
    
    while(f->next && f->next->next)
    {
        s=s->next;
        f=f->next->next;
        
        if(s==f){
            if(s==entry)return s;
            while(true)
            {
                s=s->next;
                entry=entry->next;
                if(s==entry)return entry;
                
            }

        }
     }
     return NULL;

}
Q36

