
Q1
#include <bits/stdc++.h>

void setZeros(vector<vector<int>> &matrix)
{
	int col0=1;
	int m=matrix.size();
	int n=matrix[0].size();
	for(int i=0;i<m;i++)
	{
		for(int j=0;j<n;j++)
		{
			if(matrix[i][j]==0)
			{
				matrix[i][0]=0;
				if(j!=0)
				{
					matrix[0][j]=0;
				}
				else col0=0;
			}
		}
	}
	for(int i=1;i<m;i++)
	{
		for(int j=1;j<n;j++)
		{
            if (matrix[i][j] != 0) {
                if (matrix[i][0] == 0 || matrix[0][j] == 0)
                      matrix[i][j] = 0;
            }
        }
	}
	if(matrix[0][0]==0){
		for(int i=1;i<n;i++)
		{
			matrix[0][i]=0;
		}
	}
	if(col0==0){
		for(int i=0;i<m;i++)
		{
			matrix[i][0]=0;
		}
	}
	
	

}

Q2

#include <bits/stdc++.h>

vector<vector<long long int>> printPascal(int n) 
{
   vector<vector<long long int>> output(n);
        for(int i=0; i<n; i++){
            output[i].resize(i+1, 1);
            for(int j=1; j<i; j++){
                output[i][j] = output[i-1][j-1] + output[i-1][j];
            }
        }
        return output;
  
}

Q3
#include <bits/stdc++.h> 
vector<int> nextPermutation(vector<int> &permutation, int n)
{
    int ind=-1;
    for(int i=n-2;i>=0;i--)    
    {
           if(permutation[i+1]>permutation[i])
           {
               ind=i;
               break;
           }

    }
    if(ind==-1)
    {
        reverse(permutation.begin(),permutation.end());
        return permutation;
    }
    for(int i=n-1;i>=0;i--)
    {
        if(permutation[ind]<permutation[i])
        {
            swap(permutation[ind],permutation[i]);
            break;
        }
    }
    reverse(permutation.begin()+ind+1,permutation.end());
    return permutation;

}
Q4	
#include <bits/stdc++.h> 
long long maxSubarraySum(int arr[], int n)
{
    /*
        Don't write main().
        Don't read input, it is passed as function argument.    
        No need to print anything.
        Taking input and printing output is handled automatically.
    */
    long long maxi=LONG_MIN;
    long long sum=0;
    for(int i=0;i<n;i++)
    {
        sum+=arr[i];
        maxi=max(maxi,sum);
        if(sum<0)sum=0;
    }
    if(maxi<0) return 0;
    else return maxi;

    
}

Q5
#include <bits/stdc++.h> 
void sort012(int *arr, int n)
{
   //   Write your code here
   int low=0,mid=0,high=n-1;
   

   while(mid<=high)
   {
      
      if(arr[mid]==0)
      {
         swap(arr[low],arr[mid]);
         low++;
         mid++;
      
      }
      else if (arr[mid] == 1) {

        mid++;
      }

      else  {
        swap(arr[mid], arr[high]);
        
        high--;
      }
   }
   
}
Q6
#include <bits/stdc++.h> 
int maximumProfit(vector<int> &prices){
    // Write your code here.
    int profit=0,mini=prices[0];
    for(int i=1;i<prices.size();i++)
    {
        profit=max(profit,(prices[i]-mini));
        mini=min(prices[i],mini);
    }
    return profit;
   
}
Q7
